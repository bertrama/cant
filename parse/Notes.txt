The Base Net is input.  
The currently viewed word is left on until the next word is selected by the
system.  
The Base Net activates the word nets.  When a word net has a CA on, it
has given the part of speech of that word.
(Word nets are verb, noun and other.)

I've also put in a rule net, stack net and stack top net.  The stacktop starts at
0.  What should happen is that input from any word and stacktop 0 calls the 
push rule.  The push rule should push the word on the stack and increment
stacktop.  

The system that is saved on 23 May is a fair start to the push problem.  To some
extent the input word activates the Verb Net. The zero stack element along
with the verb starts the push rule which then increments the stack; 
the stack element doesn't persist all the time.


The current system now has the push rule putting the item on the stack, by 
igniting the stack item  and using
fast bind synapses to bind the stack element to the verb.

*****current state May 25*****
Running (not stepping)
Cant Step 0 stacktop 0 is externally activated
   it ignites (pretty consistently)
CANT Step 10 stacktop 0 external activation ceases and input starts
   base net 0 ignites
   verb net 0 ignites
   push rule 0 ignites
   (order of next 2 somewhat open)
   stack comes on
   stacktop switches to 1 (though frequent fail)
   stack 0 binds to verb 0

Some real problems are starting to occur.
Firstly there are some realiability problems
  The stacktop doesn't seem to move on correctly.
  The stack 0 element often doesn't activate, and burns out when it does.
  Also updates of the input items via endEpoch in ExperimentParse do
     not occur when stepping.  

Secondly somehow input needs to move onto the next word.  This could be a rule
unto itself that fires when no other rule does, or it could be something
that push does.

Thirdly, there is only one stack item.

Fourthly, the fast synapses are really crude and never forget.


The crude idea is:
 to push the next word onto the stack (leaving follow-V me-N)
 the VP-NP rule (which doesn't exist) should fire
   how it nows that 0 is a V and stack 1 is a noun is open.
   each stack item might have a mutually exclusive rule for each of these.
 when the rule fires, it will bind the N to the object slot of the V and
 pop the stack.

Rules firing in multiple positions can be resolved by multiple rules.
Avoid problems of multiple verbs and nouns active by not having them.
Det's and punctuation can be relatively easily kludged.
There is no look-ahead.
-------------------------------------------------------------------
I've changed the fastbind neurons to be all fast-bind synapses.  It worked on
the fastbind experiment I did, and it seems simpler.  So, it's roughly
a restart after a few months off.  

So, a verb is seen and the 0 stacktop is set.  
The verb comes on.
The push rule comes on.

Current Problem
stacktop not really working right.


I think there's a conceptual problem.  
On the example "Follow me."
Assume that you shut everything off except ST1 when the first word is pushed.
1.  When me is pushed, how will the rule know that a VP and an NP are activated 
in that order.  I think this can be solved by activating the stack back to 
front. So, VP->VP NP would get some activation from NP; then it would check VP,
and fire.
2.  After that rule is applied, the period is pushed.  Now S2 was just bound
to me, so it's going to reignite that.  A way of erasing the binding is needed.
I could use compensatory learning and a sink on the fast binding neurons to
erase the connection.

